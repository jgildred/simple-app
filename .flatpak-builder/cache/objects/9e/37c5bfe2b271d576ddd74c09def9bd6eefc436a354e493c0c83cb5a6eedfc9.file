/* Application.c generated by valac 0.50.9, the Vala compiler
 * generated from Application.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <granite.h>
#include <glib/gi18n-lib.h>
#include <float.h>
#include <math.h>

#define TYPE_SIMPLE_APP (simple_app_get_type ())
#define SIMPLE_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_APP, SimpleApp))
#define SIMPLE_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SIMPLE_APP, SimpleAppClass))
#define IS_SIMPLE_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_APP))
#define IS_SIMPLE_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SIMPLE_APP))
#define SIMPLE_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_APP, SimpleAppClass))

typedef struct _SimpleApp SimpleApp;
typedef struct _SimpleAppClass SimpleAppClass;
typedef struct _SimpleAppPrivate SimpleAppPrivate;
enum  {
	SIMPLE_APP_0_PROPERTY,
	SIMPLE_APP_NUM_PROPERTIES
};
static GParamSpec* simple_app_properties[SIMPLE_APP_NUM_PROPERTIES];
typedef struct _Block1Data Block1Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

struct _SimpleApp {
	GtkApplication parent_instance;
	SimpleAppPrivate * priv;
};

struct _SimpleAppClass {
	GtkApplicationClass parent_class;
};

struct _Block1Data {
	int _ref_count_;
	SimpleApp* self;
	GtkButton* hello_button;
	GtkLabel* hello_label;
	GtkButton* rotate_button;
	GtkLabel* rotate_label;
	GtkApplicationWindow* main_window;
};

static gpointer simple_app_parent_class = NULL;

GType simple_app_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SimpleApp, g_object_unref)
SimpleApp* simple_app_new (void);
SimpleApp* simple_app_construct (GType object_type);
static void simple_app_real_activate (GApplication* base);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void __lambda4_ (Block1Data* _data1_);
static void ___lambda4__gtk_button_clicked (GtkButton* _sender,
                                     gpointer self);
static void __lambda5_ (Block1Data* _data1_);
static void ___lambda5__gtk_button_clicked (GtkButton* _sender,
                                     gpointer self);
static void __lambda6_ (Block1Data* _data1_);
static void ___lambda6__g_simple_action_activate (GSimpleAction* _sender,
                                           GVariant* parameter,
                                           gpointer self);
static gint simple_app_main (void);
static GType simple_app_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

SimpleApp*
simple_app_construct (GType object_type)
{
	SimpleApp * self = NULL;
#line 3 "../src/Application.vala"
	self = (SimpleApp*) g_object_new (object_type, "application-id", "com.github.jgildred.simple-app", "flags", G_APPLICATION_FLAGS_NONE, NULL);
#line 2 "../src/Application.vala"
	return self;
#line 91 "Application.c"
}

SimpleApp*
simple_app_new (void)
{
#line 2 "../src/Application.vala"
	return simple_app_construct (TYPE_SIMPLE_APP);
#line 99 "Application.c"
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 9 "../src/Application.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 9 "../src/Application.vala"
	return _data1_;
#line 109 "Application.c"
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 9 "../src/Application.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 119 "Application.c"
		SimpleApp* self;
#line 9 "../src/Application.vala"
		self = _data1_->self;
#line 9 "../src/Application.vala"
		_g_object_unref0 (_data1_->main_window);
#line 9 "../src/Application.vala"
		_g_object_unref0 (_data1_->rotate_label);
#line 9 "../src/Application.vala"
		_g_object_unref0 (_data1_->rotate_button);
#line 9 "../src/Application.vala"
		_g_object_unref0 (_data1_->hello_label);
#line 9 "../src/Application.vala"
		_g_object_unref0 (_data1_->hello_button);
#line 9 "../src/Application.vala"
		_g_object_unref0 (self);
#line 9 "../src/Application.vala"
		g_slice_free (Block1Data, _data1_);
#line 137 "Application.c"
	}
}

static void
__lambda4_ (Block1Data* _data1_)
{
	SimpleApp* self;
#line 54 "../src/Application.vala"
	self = _data1_->self;
#line 55 "../src/Application.vala"
	gtk_label_set_label (_data1_->hello_label, _ ("Hello World!"));
#line 56 "../src/Application.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _data1_->hello_button, FALSE);
#line 151 "Application.c"
}

static void
___lambda4__gtk_button_clicked (GtkButton* _sender,
                                gpointer self)
{
#line 54 "../src/Application.vala"
	__lambda4_ (self);
#line 160 "Application.c"
}

static void
__lambda5_ (Block1Data* _data1_)
{
	SimpleApp* self;
#line 59 "../src/Application.vala"
	self = _data1_->self;
#line 60 "../src/Application.vala"
	gtk_label_set_angle (_data1_->rotate_label, (gdouble) 90);
#line 61 "../src/Application.vala"
	gtk_label_set_label (_data1_->rotate_label, _ ("Vertical"));
#line 62 "../src/Application.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _data1_->rotate_button, FALSE);
#line 175 "Application.c"
}

static void
___lambda5__gtk_button_clicked (GtkButton* _sender,
                                gpointer self)
{
#line 59 "../src/Application.vala"
	__lambda5_ (self);
#line 184 "Application.c"
}

static void
__lambda6_ (Block1Data* _data1_)
{
	SimpleApp* self;
#line 65 "../src/Application.vala"
	self = _data1_->self;
#line 66 "../src/Application.vala"
	gtk_widget_destroy ((GtkWidget*) _data1_->main_window);
#line 195 "Application.c"
}

static void
___lambda6__g_simple_action_activate (GSimpleAction* _sender,
                                      GVariant* parameter,
                                      gpointer self)
{
#line 65 "../src/Application.vala"
	__lambda6_ (self);
#line 205 "Application.c"
}

static void
simple_app_real_activate (GApplication* base)
{
	SimpleApp * self;
	Block1Data* _data1_;
	GSimpleAction* quit_action = NULL;
	GSimpleAction* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar** _tmp3_;
	gchar** _tmp4_;
	gint _tmp4__length1;
	GtkButton* close_button = NULL;
	gchar* _tmp5_;
	gchar** _tmp6_;
	gchar** _tmp7_;
	gchar** _tmp8_;
	gint _tmp8__length1;
	gchar* _tmp9_;
	GtkButton* _tmp10_ = NULL;
	GtkButton* _tmp11_;
	GtkHeaderBar* headerbar = NULL;
	GtkHeaderBar* _tmp12_ = NULL;
	GtkButton* _tmp13_;
	GtkLabel* _tmp14_;
	GtkButton* _tmp15_;
	GtkLabel* _tmp16_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp17_ = NULL;
	gchar* _tmp18_;
	GtkApplicationWindow* _tmp19_ = NULL;
#line 9 "../src/Application.vala"
	self = (SimpleApp*) base;
#line 9 "../src/Application.vala"
	_data1_ = g_slice_new0 (Block1Data);
#line 9 "../src/Application.vala"
	_data1_->_ref_count_ = 1;
#line 9 "../src/Application.vala"
	_data1_->self = g_object_ref (self);
#line 10 "../src/Application.vala"
	_tmp0_ = g_simple_action_new ("quit", NULL);
#line 10 "../src/Application.vala"
	quit_action = _tmp0_;
#line 12 "../src/Application.vala"
	g_action_map_add_action ((GActionMap*) self, (GAction*) quit_action);
#line 13 "../src/Application.vala"
	_tmp1_ = g_strdup ("<Control>q");
#line 13 "../src/Application.vala"
	_tmp2_ = g_strdup ("<Contro>w");
#line 13 "../src/Application.vala"
	_tmp3_ = g_new0 (gchar*, 2 + 1);
#line 13 "../src/Application.vala"
	_tmp3_[0] = _tmp1_;
#line 13 "../src/Application.vala"
	_tmp3_[1] = _tmp2_;
#line 13 "../src/Application.vala"
	_tmp4_ = _tmp3_;
#line 13 "../src/Application.vala"
	_tmp4__length1 = 2;
#line 13 "../src/Application.vala"
	gtk_application_set_accels_for_action ((GtkApplication*) self, "app.quit", _tmp4_);
#line 13 "../src/Application.vala"
	_tmp4_ = (_vala_array_free (_tmp4_, _tmp4__length1, (GDestroyNotify) g_free), NULL);
#line 14 "../src/Application.vala"
	_tmp5_ = g_strdup ("app.quit");
#line 14 "../src/Application.vala"
	_tmp7_ = _tmp6_ = gtk_application_get_accels_for_action ((GtkApplication*) self, "app.quit");
#line 14 "../src/Application.vala"
	_tmp8_ = _tmp7_;
#line 14 "../src/Application.vala"
	_tmp8__length1 = _vala_array_length (_tmp6_);
#line 14 "../src/Application.vala"
	_tmp9_ = granite_markup_accel_tooltip (_tmp8_, (gint) _vala_array_length (_tmp6_), "Quit");
#line 14 "../src/Application.vala"
	_tmp10_ = (GtkButton*) gtk_button_new_from_icon_name ("process-stop", (GtkIconSize) GTK_ICON_SIZE_LARGE_TOOLBAR);
#line 14 "../src/Application.vala"
	gtk_actionable_set_action_name ((GtkActionable*) _tmp10_, _tmp5_);
#line 14 "../src/Application.vala"
	_g_free0 (_tmp5_);
#line 14 "../src/Application.vala"
	gtk_widget_set_tooltip_markup ((GtkWidget*) _tmp10_, _tmp9_);
#line 14 "../src/Application.vala"
	_g_free0 (_tmp9_);
#line 14 "../src/Application.vala"
	g_object_ref_sink (_tmp10_);
#line 14 "../src/Application.vala"
	_tmp11_ = _tmp10_;
#line 14 "../src/Application.vala"
	_tmp8_ = (_vala_array_free (_tmp8_, _tmp8__length1, (GDestroyNotify) g_free), NULL);
#line 14 "../src/Application.vala"
	close_button = _tmp11_;
#line 21 "../src/Application.vala"
	_tmp12_ = (GtkHeaderBar*) gtk_header_bar_new ();
#line 21 "../src/Application.vala"
	gtk_header_bar_set_show_close_button (_tmp12_, TRUE);
#line 21 "../src/Application.vala"
	g_object_ref_sink (_tmp12_);
#line 21 "../src/Application.vala"
	headerbar = _tmp12_;
#line 24 "../src/Application.vala"
	gtk_container_add ((GtkContainer*) headerbar, (GtkWidget*) close_button);
#line 26 "../src/Application.vala"
	_tmp13_ = (GtkButton*) gtk_button_new_with_label (_ ("Say Hello"));
#line 26 "../src/Application.vala"
	g_object_ref_sink (_tmp13_);
#line 26 "../src/Application.vala"
	_data1_->hello_button = _tmp13_;
#line 27 "../src/Application.vala"
	_tmp14_ = (GtkLabel*) gtk_label_new (NULL);
#line 27 "../src/Application.vala"
	g_object_ref_sink (_tmp14_);
#line 27 "../src/Application.vala"
	_data1_->hello_label = _tmp14_;
#line 29 "../src/Application.vala"
	_tmp15_ = (GtkButton*) gtk_button_new_with_label (_ ("Rotate"));
#line 29 "../src/Application.vala"
	g_object_ref_sink (_tmp15_);
#line 29 "../src/Application.vala"
	_data1_->rotate_button = _tmp15_;
#line 30 "../src/Application.vala"
	_tmp16_ = (GtkLabel*) gtk_label_new (_ ("Horizontal"));
#line 30 "../src/Application.vala"
	g_object_ref_sink (_tmp16_);
#line 30 "../src/Application.vala"
	_data1_->rotate_label = _tmp16_;
#line 32 "../src/Application.vala"
	_tmp17_ = (GtkGrid*) gtk_grid_new ();
#line 32 "../src/Application.vala"
	gtk_grid_set_column_spacing (_tmp17_, 6);
#line 32 "../src/Application.vala"
	gtk_grid_set_row_spacing (_tmp17_, 6);
#line 32 "../src/Application.vala"
	g_object_ref_sink (_tmp17_);
#line 32 "../src/Application.vala"
	grid = _tmp17_;
#line 37 "../src/Application.vala"
	_tmp18_ = g_strdup (_ ("Hello World"));
#line 37 "../src/Application.vala"
	_tmp19_ = (GtkApplicationWindow*) gtk_application_window_new ((GtkApplication*) self);
#line 37 "../src/Application.vala"
	g_object_set ((GtkWindow*) _tmp19_, "default-height", 300, NULL);
#line 37 "../src/Application.vala"
	g_object_set ((GtkWindow*) _tmp19_, "default-width", 300, NULL);
#line 37 "../src/Application.vala"
	gtk_window_set_title ((GtkWindow*) _tmp19_, _tmp18_);
#line 37 "../src/Application.vala"
	_g_free0 (_tmp18_);
#line 37 "../src/Application.vala"
	g_object_ref_sink (_tmp19_);
#line 37 "../src/Application.vala"
	_data1_->main_window = _tmp19_;
#line 44 "../src/Application.vala"
	gtk_grid_attach (grid, (GtkWidget*) _data1_->hello_button, 0, 0, 1, 1);
#line 45 "../src/Application.vala"
	gtk_grid_attach_next_to (grid, (GtkWidget*) _data1_->hello_label, (GtkWidget*) _data1_->hello_button, GTK_POS_RIGHT, 1, 1);
#line 48 "../src/Application.vala"
	gtk_grid_attach (grid, (GtkWidget*) _data1_->rotate_button, 0, 1, 1, 1);
#line 49 "../src/Application.vala"
	gtk_grid_attach_next_to (grid, (GtkWidget*) _data1_->rotate_label, (GtkWidget*) _data1_->rotate_button, GTK_POS_RIGHT, 1, 1);
#line 51 "../src/Application.vala"
	gtk_container_add ((GtkContainer*) _data1_->main_window, (GtkWidget*) grid);
#line 52 "../src/Application.vala"
	gtk_window_set_titlebar ((GtkWindow*) _data1_->main_window, (GtkWidget*) headerbar);
#line 54 "../src/Application.vala"
	g_signal_connect_data (_data1_->hello_button, "clicked", (GCallback) ___lambda4__gtk_button_clicked, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
#line 59 "../src/Application.vala"
	g_signal_connect_data (_data1_->rotate_button, "clicked", (GCallback) ___lambda5__gtk_button_clicked, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
#line 65 "../src/Application.vala"
	g_signal_connect_data (quit_action, "activate", (GCallback) ___lambda6__g_simple_action_activate, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
#line 69 "../src/Application.vala"
	gtk_widget_show_all ((GtkWidget*) _data1_->main_window);
#line 9 "../src/Application.vala"
	_g_object_unref0 (grid);
#line 9 "../src/Application.vala"
	_g_object_unref0 (headerbar);
#line 9 "../src/Application.vala"
	_g_object_unref0 (close_button);
#line 9 "../src/Application.vala"
	_g_object_unref0 (quit_action);
#line 9 "../src/Application.vala"
	block1_data_unref (_data1_);
#line 9 "../src/Application.vala"
	_data1_ = NULL;
#line 391 "Application.c"
}

static gint
simple_app_main (void)
{
	SimpleApp* _tmp0_;
	SimpleApp* _tmp1_;
	gint _tmp2_;
	gint result = 0;
#line 73 "../src/Application.vala"
	_tmp0_ = simple_app_new ();
#line 73 "../src/Application.vala"
	_tmp1_ = _tmp0_;
#line 73 "../src/Application.vala"
	_tmp2_ = g_application_run ((GApplication*) _tmp1_, (gint) 0, NULL);
#line 73 "../src/Application.vala"
	_g_object_unref0 (_tmp1_);
#line 73 "../src/Application.vala"
	result = _tmp2_;
#line 73 "../src/Application.vala"
	return result;
#line 413 "Application.c"
}

int
main (int argc,
      char ** argv)
{
#line 72 "../src/Application.vala"
	return simple_app_main ();
#line 422 "Application.c"
}

static void
simple_app_class_init (SimpleAppClass * klass,
                       gpointer klass_data)
{
#line 1 "../src/Application.vala"
	simple_app_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Application.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication*)) simple_app_real_activate;
#line 433 "Application.c"
}

static void
simple_app_instance_init (SimpleApp * self,
                          gpointer klass)
{
}

static GType
simple_app_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (SimpleAppClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) simple_app_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (SimpleApp), 0, (GInstanceInitFunc) simple_app_instance_init, NULL };
	GType simple_app_type_id;
	simple_app_type_id = g_type_register_static (gtk_application_get_type (), "SimpleApp", &g_define_type_info, 0);
	return simple_app_type_id;
}

GType
simple_app_get_type (void)
{
	static volatile gsize simple_app_type_id__volatile = 0;
	if (g_once_init_enter (&simple_app_type_id__volatile)) {
		GType simple_app_type_id;
		simple_app_type_id = simple_app_get_type_once ();
		g_once_init_leave (&simple_app_type_id__volatile, simple_app_type_id);
	}
	return simple_app_type_id__volatile;
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}

