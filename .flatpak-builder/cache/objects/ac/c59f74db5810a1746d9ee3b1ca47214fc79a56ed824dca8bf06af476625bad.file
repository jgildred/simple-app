/* Application.c generated by valac 0.50.9, the Vala compiler
 * generated from Application.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include <glib/gi18n-lib.h>

#define TYPE_MY_APP (my_app_get_type ())
#define MY_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MY_APP, MyApp))
#define MY_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MY_APP, MyAppClass))
#define IS_MY_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MY_APP))
#define IS_MY_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MY_APP))
#define MY_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MY_APP, MyAppClass))

typedef struct _MyApp MyApp;
typedef struct _MyAppClass MyAppClass;
typedef struct _MyAppPrivate MyAppPrivate;
enum  {
	MY_APP_0_PROPERTY,
	MY_APP_NUM_PROPERTIES
};
static GParamSpec* my_app_properties[MY_APP_NUM_PROPERTIES];
typedef struct _Block1Data Block1Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

struct _MyApp {
	GtkApplication parent_instance;
	MyAppPrivate * priv;
};

struct _MyAppClass {
	GtkApplicationClass parent_class;
};

struct _Block1Data {
	int _ref_count_;
	MyApp* self;
	GtkButton* button_hello;
};

static gpointer my_app_parent_class = NULL;

GType my_app_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyApp, g_object_unref)
MyApp* my_app_new (void);
MyApp* my_app_construct (GType object_type);
static void my_app_real_activate (GApplication* base);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void __lambda4_ (Block1Data* _data1_);
static void ___lambda4__gtk_button_clicked (GtkButton* _sender,
                                     gpointer self);
static gint my_app_main (void);
static GType my_app_get_type_once (void);

MyApp*
my_app_construct (GType object_type)
{
	MyApp * self = NULL;
#line 3 "../src/Application.vala"
	self = (MyApp*) g_object_new (object_type, "application-id", "com.github.jgildred.gtk-hello", "flags", G_APPLICATION_FLAGS_NONE, NULL);
#line 2 "../src/Application.vala"
	return self;
#line 68 "Application.c"
}

MyApp*
my_app_new (void)
{
#line 2 "../src/Application.vala"
	return my_app_construct (TYPE_MY_APP);
#line 76 "Application.c"
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 9 "../src/Application.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 9 "../src/Application.vala"
	return _data1_;
#line 86 "Application.c"
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 9 "../src/Application.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 96 "Application.c"
		MyApp* self;
#line 9 "../src/Application.vala"
		self = _data1_->self;
#line 9 "../src/Application.vala"
		_g_object_unref0 (_data1_->button_hello);
#line 9 "../src/Application.vala"
		_g_object_unref0 (self);
#line 9 "../src/Application.vala"
		g_slice_free (Block1Data, _data1_);
#line 106 "Application.c"
	}
}

static void
__lambda4_ (Block1Data* _data1_)
{
	MyApp* self;
#line 14 "../src/Application.vala"
	self = _data1_->self;
#line 15 "../src/Application.vala"
	gtk_button_set_label (_data1_->button_hello, _ ("Hello World!"));
#line 16 "../src/Application.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _data1_->button_hello, FALSE);
#line 120 "Application.c"
}

static void
___lambda4__gtk_button_clicked (GtkButton* _sender,
                                gpointer self)
{
#line 14 "../src/Application.vala"
	__lambda4_ (self);
#line 129 "Application.c"
}

static void
my_app_real_activate (GApplication* base)
{
	MyApp * self;
	Block1Data* _data1_;
	GtkButton* _tmp0_ = NULL;
	GtkApplicationWindow* main_window = NULL;
	gchar* _tmp1_;
	GtkApplicationWindow* _tmp2_ = NULL;
#line 9 "../src/Application.vala"
	self = (MyApp*) base;
#line 9 "../src/Application.vala"
	_data1_ = g_slice_new0 (Block1Data);
#line 9 "../src/Application.vala"
	_data1_->_ref_count_ = 1;
#line 9 "../src/Application.vala"
	_data1_->self = g_object_ref (self);
#line 10 "../src/Application.vala"
	_tmp0_ = (GtkButton*) gtk_button_new_with_label (_ ("Click me!"));
#line 10 "../src/Application.vala"
	g_object_set ((GtkWidget*) _tmp0_, "margin", 12, NULL);
#line 10 "../src/Application.vala"
	g_object_ref_sink (_tmp0_);
#line 10 "../src/Application.vala"
	_data1_->button_hello = _tmp0_;
#line 14 "../src/Application.vala"
	g_signal_connect_data (_data1_->button_hello, "clicked", (GCallback) ___lambda4__gtk_button_clicked, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
#line 19 "../src/Application.vala"
	_tmp1_ = g_strdup (_ ("Hello World"));
#line 19 "../src/Application.vala"
	_tmp2_ = (GtkApplicationWindow*) gtk_application_window_new ((GtkApplication*) self);
#line 19 "../src/Application.vala"
	g_object_set ((GtkWindow*) _tmp2_, "default-height", 300, NULL);
#line 19 "../src/Application.vala"
	g_object_set ((GtkWindow*) _tmp2_, "default-width", 300, NULL);
#line 19 "../src/Application.vala"
	gtk_window_set_title ((GtkWindow*) _tmp2_, _tmp1_);
#line 19 "../src/Application.vala"
	_g_free0 (_tmp1_);
#line 19 "../src/Application.vala"
	g_object_ref_sink (_tmp2_);
#line 19 "../src/Application.vala"
	main_window = _tmp2_;
#line 24 "../src/Application.vala"
	gtk_container_add ((GtkContainer*) main_window, (GtkWidget*) _data1_->button_hello);
#line 25 "../src/Application.vala"
	gtk_widget_show_all ((GtkWidget*) main_window);
#line 9 "../src/Application.vala"
	_g_object_unref0 (main_window);
#line 9 "../src/Application.vala"
	block1_data_unref (_data1_);
#line 9 "../src/Application.vala"
	_data1_ = NULL;
#line 185 "Application.c"
}

static gint
my_app_main (void)
{
	MyApp* _tmp0_;
	MyApp* _tmp1_;
	gint _tmp2_;
	gint result = 0;
#line 29 "../src/Application.vala"
	_tmp0_ = my_app_new ();
#line 29 "../src/Application.vala"
	_tmp1_ = _tmp0_;
#line 29 "../src/Application.vala"
	_tmp2_ = g_application_run ((GApplication*) _tmp1_, (gint) 0, NULL);
#line 29 "../src/Application.vala"
	_g_object_unref0 (_tmp1_);
#line 29 "../src/Application.vala"
	result = _tmp2_;
#line 29 "../src/Application.vala"
	return result;
#line 207 "Application.c"
}

int
main (int argc,
      char ** argv)
{
#line 28 "../src/Application.vala"
	return my_app_main ();
#line 216 "Application.c"
}

static void
my_app_class_init (MyAppClass * klass,
                   gpointer klass_data)
{
#line 1 "../src/Application.vala"
	my_app_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Application.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication*)) my_app_real_activate;
#line 227 "Application.c"
}

static void
my_app_instance_init (MyApp * self,
                      gpointer klass)
{
}

static GType
my_app_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MyAppClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) my_app_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MyApp), 0, (GInstanceInitFunc) my_app_instance_init, NULL };
	GType my_app_type_id;
	my_app_type_id = g_type_register_static (gtk_application_get_type (), "MyApp", &g_define_type_info, 0);
	return my_app_type_id;
}

GType
my_app_get_type (void)
{
	static volatile gsize my_app_type_id__volatile = 0;
	if (g_once_init_enter (&my_app_type_id__volatile)) {
		GType my_app_type_id;
		my_app_type_id = my_app_get_type_once ();
		g_once_init_leave (&my_app_type_id__volatile, my_app_type_id);
	}
	return my_app_type_id__volatile;
}

